/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Thu Sep 26 2019                                           */
/*    Description:  Competition Template                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/
 
// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----
 
#include "vex.h"
 
using namespace vex;
 
// A global instance of competition
competition Competition;
 
controller Controller1;
motor RightFront = motor(PORT19,true);
motor LeftFront = motor(PORT2);
motor RightBack = motor(PORT10,true);
motor LeftBack = motor(PORT20);
motor Intake = motor(PORT6);
motor Tower = motor(PORT1);
motor_group Left = motor_group(LeftFront,LeftBack);
motor_group Right = motor_group(RightFront,RightBack);
drivetrain Drivetrain = drivetrain(Left,Right);
 
void DriveForward (){
 Drivetrain.driveFor(fwd, 12, inches);
}
 
void DriveBackwards (){
 Drivetrain.driveFor(fwd, 12, inches);
}
 
void TurnLeft (){
 Drivetrain.turnFor(left, 90, rotationUnits::deg);
}
 
void TurnRight (){
 Drivetrain.turnFor(right, 90, rotationUnits::deg);
}
 
/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/
 
void pre_auton(void) {
 // Initializing Robot Configuration. DO NOT REMOVE!
 vexcodeInit();
 
 // All activities that occur before the competition starts
 // Example: clearing encoders, setting servo positions, ...
}
 
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
 
void autonomous(void) {
while (1) {
 DriveForward();
 TurnRight();
 DriveForward();
 TurnLeft();
 Tower.spinFor(fwd, 5, sec);
 DriveBackwards();
}
 // ..........................................................................
}
 
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
 
void usercontrol(void) {
 // User control code here, inside the loop
 while (1) {
   /*
     Left.spin(directionType::rev,(Controller1.Axis3.value()),velocityUnits::pct);
     Right.spin(directionType::fwd,(Controller1.Axis3.value()),velocityUnits::pct);
     */
 
     LeftFront.spin(directionType::fwd,(Controller1.Axis3.value() + Controller1.Axis4.value()),velocityUnits::pct);
     LeftBack.spin(directionType::fwd,(Controller1.Axis3.value() + Controller1.Axis4.value()),velocityUnits::pct);
     RightFront.spin(directionType::fwd,(Controller1.Axis3.value() - Controller1.Axis4.value()),velocityUnits::pct);
     RightBack.spin(directionType::fwd,(Controller1.Axis3.value() - Controller1.Axis4.value()),velocityUnits::pct);
    if (Controller1.ButtonL2.pressing()) {
        Intake.spin(directionType::rev,70,velocityUnits::pct);
     }
    else if (Controller1.ButtonL1.pressing()) {
        Intake.spin(directionType::fwd,70,velocityUnits::pct);
     }
     else{
          Intake.stop(hold);
     }
    if (Controller1.ButtonUp.pressing()) {
        Tower.spin(directionType::fwd,70,velocityUnits::pct);
     }
    else if (Controller1.ButtonDown.pressing()) {
        Tower.spin(directionType::rev,70,velocityUnits::pct);
     }
    else{
        Tower.stop(hold);
    }
 
   wait(20, msec); // Sleep the task for a short amount of time to
                   // prevent wasted resources.
 }
}
 
//
// Main will set up the competition functions and callbacks.
//
int main() {
 // Set up callbacks for autonomous and driver control periods.
 Competition.autonomous(autonomous);
 Competition.drivercontrol(usercontrol);
 
 // Run the pre-autonomous function.
 pre_auton();
 
 // Prevent main from exiting with an infinite loop.
 while (true) {
   wait(100, msec);
 }
}
